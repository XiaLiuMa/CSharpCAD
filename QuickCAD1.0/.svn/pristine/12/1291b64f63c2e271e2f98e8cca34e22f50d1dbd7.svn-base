using System;
using Max.BaseKit;
using System.Timers;
using DataSyncTarget.Comm;
using System.Diagnostics;
using DataSyncTarget.Config;
using Max.BaseKit.Utils;
using Max.ISolator.Core;

namespace DataSyncTarget
{
    static class Program
    {
        /// <summary>
        /// 应用程序的主入口点。
        /// </summary>
        static void Main()
        {
            AppDomain.CurrentDomain.ProcessExit += CurrentDomain_ProcessExit;
            AppDomain.CurrentDomain.UnhandledException += CurrentDomain_UnhandledException;
            string process_name = AppXmlConfiger.Config.ProcessName;//进程名称
            System.Threading.Mutex mutex = new System.Threading.Mutex(false, process_name);
            bool Running = !mutex.WaitOne(0, false);
            if (!Running)
            {
                #region 定时重启
                if (AppXmlConfiger.Config.AutoRestartEnable)
                {
                    Timer timer = new Timer(AppXmlConfiger.Config.AutoRestartTimes * 24 * 60 * 60 * 1000);
                    timer.Elapsed += (s, e) => { Restart(); };
                    timer.Enabled = true;
                    timer.Start();
                }
                #endregion
                InitISolator();//初始化隔离器
                WebServer.Instance.StartService();
                while (true) Console.ReadKey();
            }
        }

        /// <summary>
        /// 初始化隔离器
        /// </summary>
        private static void InitISolator()
        {
            string iparam = string.Empty;
            switch (AppXmlConfiger.Config.SyncType)
            {
                case 1: iparam = JsonUtil.ObjectToStr(AppXmlConfiger.Config.NetBrake); break;//网闸模式
                case 2: iparam = JsonUtil.ObjectToStr(AppXmlConfiger.Config.SerialPorts); break;//串口模式
                case 3: iparam = JsonUtil.ObjectToStr(AppXmlConfiger.Config.SerialServers); break;//串口服务器模式
                default: break;
            }
            MaxISolator.Instance.InitISolator(AppXmlConfiger.Config.SyncType, AppXmlConfiger.Config.BlockSize, iparam, (p) => { if (p == 1) Program.Restart(); });
        }

        /// <summary>
        /// 重启程序
        /// </summary>
        public static void Restart()
        {
            Process.Start(Process.GetCurrentProcess().MainModule.FileName);
            Environment.Exit(0);
        }

        /// <summary>
        /// 控制台进程关闭事件
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private static void CurrentDomain_ProcessExit(object sender, EventArgs e)
        {
            WebServer.Instance.Dispose();
        }

        /// <summary>
        /// 未捕获的异常
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private static void CurrentDomain_UnhandledException(object sender, UnhandledExceptionEventArgs e)
        {
            NLogger.Error($"系统未捕获异常：{e.ToString()}");
            WebServer.Instance.Dispose();
            Environment.Exit(0);
        }
    }
}
