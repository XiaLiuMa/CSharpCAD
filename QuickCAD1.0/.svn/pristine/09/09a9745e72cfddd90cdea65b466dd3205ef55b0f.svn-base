//using Max.BaseKit;
//using Max.BaseKit.Utils;
//using DataSyncTarget.Config.Mods;
//using DataSyncTarget.UseData;
//using Max.ISolator;
//using Max.ISolator.MinioCore;
//using System;

//namespace DataSyncTarget.Comm
//{
//    public class AsGlobal
//    {
//        private static AppConfig _Config;
//        /// <summary>
//        /// App系统配置
//        /// </summary>
//        public static AppConfig Config
//        {
//            get
//            {
//                if (_Config == null)
//                {
//                    string filepath = $@"{AppContext.BaseDirectory}/DataSyncTarget.xml";
//                    _Config = XmlUtils.Load<AppConfig>(filepath);
//                }
//                return _Config;
//            }
//            set
//            {
//                _Config = value;
//            }
//        }

//        /// <summary>
//        /// 初始化系统
//        /// </summary>
//        public static void Init()
//        {
//            try
//            {
//                NLogger.Info($"启动{Config.AppName}...");

//                #region 初始化文件服务器
//                string endpoint = Config.MimioConfig.Endpoint;
//                string accessKey = Config.MimioConfig.AccessKey;
//                string secretKey = Config.MimioConfig.SecretKey;
//                string bucketName = Config.MimioConfig.BucketName;
//                MinioClientManger.Instance.InitMinioConfig(endpoint, accessKey, secretKey, bucketName);
//                #endregion

//                #region 启动隔离器
//                string iparam = (Config.SyncType == 1) ? JsonUtil.ObjectToStr(Config.NetBrake) : (Config.SyncType == 2) ? JsonUtil.ObjectToStr(Config.SerialPorts) : (Config.SyncType == 3) ? JsonUtil.ObjectToStr(Config.SerialServers) : "";
//                MaxISolator.Instance.InitISolator(Config.SyncType, Config.BlockSize, iparam, (p) => { if (p == 1) Program.Restart(); });
//                #endregion

//                #region 启动Kafka
//                if (Config.EnableKafka)
//                {
//                    string url = Config.KafkaConfig.BootstrapServers;
//                    string sctopic = Config.KafkaConfig.ScTopic;
//                    string xfgroup = Config.KafkaConfig.XfGroup;
//                    string xftopic = Config.KafkaConfig.XfTopic;
//                    int maxsize = Config.KafkaConfig.MaxSize;
//                    KafkaManager.Instance.InitKafka(url, sctopic, xfgroup, xftopic, maxsize);
//                }
//                #endregion

//                #region 启动RabbitMq客户端
//                if (Config.EnableRabbitMq)
//                {
//                    MqManager.Instance.InitRabbitMQ();
//                }
//                #endregion

//                LogManager.Instance.StartLogCleaning();
//            }
//            catch (Exception ex)
//            {
//                NLogger.Error($"启动{Config.AppName}异常：{ex.Message}");
//            }
//        }

//        public static void DisInit()
//        {
//            //SaveAppConfig();
//            LogManager.Instance.StopLogCleaning();
//        }

//        /// <summary>
//        /// 保存系统配置文件
//        /// </summary>
//        public static void SaveAppConfig()
//        {
//            string filepath = $@"{AppContext.BaseDirectory}/DataSyncTarget.xml";
//            XmlUtils.Save(Config, filepath);
//        }
//    }
//}
