<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>串口配置</title>
    <meta name="renderer" content="webkit">
    <meta http-equiv="X-UA-Compatible" content="IE=edge,chrome=1">
    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1">
    <link rel="stylesheet" href="/lib/layui-v2.9.2/css/layui.css" media="all">
    <link rel="stylesheet" href="/css/public.css" media="all">
</head>
<body>
    <div class="layuimini-container">
        <div class="layuimini-main">
            <fieldset class="table-search-fieldset">
                <legend>搜索信息</legend>
                <div style="margin: 10px 10px 10px 10px">
                    <form class="layui-form layui-form-pane" action="">
                        <div class="layui-form-item">
                            <div class="layui-inline">
                                <label class="layui-form-label">模糊搜索</label>
                                <div class="layui-input-inline">
                                    <input name="condition" type="text" autocomplete="off" class="layui-input">
                                </div>
                            </div>
                            <div class="layui-inline">
                                <button type="submit" id="searchBton" class="layui-btn layui-btn-primary" lay-submit lay-filter="data-search-btn">
                                    <i class="layui-icon">搜 索</i>
                                </button>
                            </div>
                        </div>
                    </form>
                </div>
            </fieldset>

            <script type="text/html" id="toolbarDemo">
                <div class="layui-btn-container">
                    <button class="layui-btn layui-btn-normal layui-btn-sm data-add-btn" lay-event="add"> 添加 </button>
                    <button class="layui-btn layui-btn-sm layui-btn-danger data-delete-btn" lay-event="delete"> 删除 </button>
                </div>
            </script>

            <table class="layui-hide" id="currentTableId" lay-filter="currentTableFilter"></table>

            <script type="text/html" id="currentTableBar">
                <a class="layui-btn layui-btn-normal layui-btn-xs data-count-look" lay-event="look">查看</a>
                <a class="layui-btn layui-btn-normal layui-btn-xs data-count-edit" lay-event="edit">编辑</a>
                <a class="layui-btn layui-btn-xs layui-btn-danger data-count-delete" lay-event="delete">删除</a>
            </script>

        </div>
    </div>
    <script src="/lib/layui-v2.9.2/layui.js" charset="utf-8"></script>
    <script>
        var parentMod; //全局变量,要传给子页面的参数
        var subPageState; //全局变量，子页面状态('look','add','edit')
        layui.use(['form', 'table'], function () {
            var $ = layui.jquery;
            var form = layui.form;
            var table = layui.table;

            var page = 1;
            var limit = 10;

            //渲染表格
            var tab_name = table.render({
                elem: '#currentTableId',
                type: "GET",
                url: '/SerialPort/PagingSearch',
                dataType: "json",
                where: { "page": page, "limit": limit, "condition": "" },
                toolbar: '#toolbarDemo',
                defaultToolbar: ['filter', 'exports', 'print'],
                cellMinWidth: 50,
                cols: [[
                    { type: "checkbox", width: 50 },
                    { field: 'id', title: '主键Id', sort: true },
                    { field: 'isUsable', title: '是否启用' },
                    { field: 'portName', title: '串口名称' },
                    { field: 'baudRate', title: '波特率' },
                    { field: 'dataBit', title: '数据位' },
                    { field: 'stopBit', title: '停止位' },
                    { field: 'parity', title: '校验位' },
                    { field: 'produceCachePath', title: '缓存路径' },
                    { field: 'isBackupProduce', title: '是否备份' },
                    { field: 'produceBackupPath', title: '备份路径' },
                    { field: 'produceChannelSize', title: '管道大小' },
                    { field: 'itemSize', title: '数量大小' },
                    { field: 'bulkSize', title: '容积大小' },
                    { field: 'isZip', title: '是否压缩' },
                    { title: '操作', width: 200, toolbar: '#currentTableBar', align: "center" }
                ]],
                page: {
                    curr: 1,
                    limit: 10,
                    limits: [10, 15, 20, 30, 50, 100],
                    layout: ['count', 'prev', 'page', 'next', 'limit', 'refresh', 'skip'], // 功能布局
                },
                parseData: function (res) { //【重要：数据解析回调函数，可用于监听分页控件的操作，以及数据变化情况如删除数据】
                    var layui_page = tab_name.config.page;
                    page = layui_page.curr;
                    limit = layui_page.limit;
                    tab_name.config.where = { "page": page, "limit": limit, "condition": "" };
                    //RefreshTable();
                },
                loading: true,
                skin: 'line' //表格风格 line （行边框风格）row （列边框风格）nob （无边框风格）
            });

            //监听搜索操作
            form.on('submit(data-search-btn)', function (data) {
                //var result = JSON.stringify(data.field); //转json字符串
                //layer.alert(result, { title: '最终的搜索信息' });//弹窗显示
                RefreshTable();
                return false;
            });

            //监听toolbar事件
            table.on('toolbar(currentTableFilter)', function (obj) {
                if (obj.event === 'add') {  //添加操作
                    subPageState = 'add';
                    var index = layer.open({
                        title: '添加串口',
                        type: 2,
                        shade: 0.2,
                        maxmin: false,
                        shadeClose: true,
                        area: ['100%', '100%'],
                        content: '/SerialPort/Detail',
                    });
                    $(window).on("resize", function () {
                        layer.full(index);
                    });
                } else if (obj.event === 'delete') {  //批量删除操作
                    var checkStatus = table.checkStatus('currentTableId');
                    checkData = checkStatus.data;
                    layer.confirm('确定批量删除吗？', function (index) {
                        var ids = "";
                        checkData.forEach(function (item) {
                            ids += item.id + ",";
                        });
                        DeleteData(ids);
                        layer.close(index);
                    });
                }
            });

            //监听表格复选框选择
            table.on('checkbox(currentTableFilter)', function (obj) {
                console.log(obj)
            });

            //监听表格内部操作事件
            table.on('tool(currentTableFilter)', function (obj) {
                if (obj.event === 'look') {  //查看操作
                    subPageState = 'look';
                    parentMod = obj.data;
                    var index = layer.open({
                        title: '查看串口',
                        type: 2,
                        shade: 0.2,
                        maxmin: false,
                        shadeClose: true,
                        area: ['100%', '100%'],
                        content: '/SerialPort/Detail',
                    });
                    $(window).on("resize", function () {
                        layer.full(index);
                    });
                } else if (obj.event === 'edit') { //编辑操作
                    subPageState = 'edit';
                    parentMod = obj.data;
                    var index = layer.open({
                        title: '编辑串口',
                        type: 2,
                        shade: 0.2,
                        maxmin: false,
                        shadeClose: true,
                        area: ['100%', '100%'],
                        content: '/SerialPort/Detail',
                    });
                    $(window).on("resize", function () {
                        layer.full(index);
                    });
                    return false;
                } else if (obj.event === 'delete') { //删除操作
                    layer.confirm('确定删除行吗？', function (index) {
                        DeleteData(obj.data.id);
                        $('searchBton').click();//触发搜索按钮
                        layer.close(index);
                    });
                }
            });

            //Table刷新
            function RefreshTable() {
                var condition = $('input[name="condition"]').val();
                table.reload('currentTableId', {
                    where: { "page": page, "limit": limit, "condition": condition }
                });
            }

            //删除数据
            function DeleteData(ids) {
                $.ajax({
                    type: 'Post', //你要请求的api的URL
                    url: "/SerialPort/Delete", //是否使用缓存
                    cache: false, //数据类型，这里我用的是json
                    dataType: "json",//必要的时候需要用JSON.stringify() 将JSON对象转换成字符串
                    data: { ids: ids },
                    success: function (res) {    //函数参数 "data" 为请求成功服务端返回的数据
                        if (res.code == 0) {
                            layer.msg(res.msg);
                        }
                    },
                    error: function (err) {
                        if (err.status == 401) {
                            parent.location.href = "/Hmoe/Login";
                        }
                    }
                });
            }
        });
    </script>
</body>
</html>