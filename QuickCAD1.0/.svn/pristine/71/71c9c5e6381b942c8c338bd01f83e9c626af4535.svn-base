using Max.BaseKit;
using Microsoft.AspNetCore.Builder;
using Microsoft.AspNetCore.Builder.Internal;
using Microsoft.AspNetCore.Hosting;
using Microsoft.AspNetCore.Http;
using Microsoft.AspNetCore.HttpOverrides;
using Microsoft.Extensions.DependencyInjection;
using Microsoft.Extensions.FileProviders;
using System;
using System.Linq;
using System.Net;
using System.Net.NetworkInformation;
using System.Threading;
using System.Threading.Tasks;
using Max.BaseKit.Utils;
using DataSyncTarget.Config;

namespace DataSyncTarget.Comm
{
    public class WebServer : IDisposable
    {
        #region 单例
        private static WebServer instance;
        private readonly static object objLock = new object();
        public static WebServer Instance
        {
            get
            {
                if (instance == null)
                {
                    lock (objLock)
                    {
                        if (instance == null)
                        {
                            instance = new WebServer();
                        }
                    }
                }
                return instance;
            }
        }
        #endregion

        private IWebHost webHost;
        #region WebApp使用，含前端网页
        public void StartService()
        {
            NLogger.Info("启动WebServer...");
            try
            {
                if (PortInUse(AppXmlConfiger.Config.WebPort))    //端口被占用
                {
                    int tempPort = 0;
                    Random rand = new Random();
                    do
                    {
                        tempPort = rand.Next(5000, 10000);
                    } while (PortInUse(tempPort));
                    AppXmlConfiger.Config.WebPort = tempPort;
                    AppXmlConfiger.SaveConfig();
                    Thread.Sleep(1000); //等待基础数据刷新
                }
                string webapiUrl = $"http://{AppXmlConfiger.Config.WebIp}:{AppXmlConfiger.Config.WebPort}";
                NLogger.Info($"当前Web地址是{webapiUrl}");

                #region 初始化前端配置文件[废弃，用前端获取请求地址修改js变量的方式使用]
                //string qdjs = $@"{AppContext.BaseDirectory}/wwwroot/comm/js/mygloble.js";//前端配置文件
                //string ipport = $"var params = '{AsGlobal.Config.WebMappingIp}:{AsGlobal.Config.WebMappingPort}';";
                //string appname = $"var appname = '{AsGlobal.Config.AppName}';";
                //FileUtil.SaveFile(qdjs, ipport + "\r\n" + appname, false);//覆盖js配置
                #endregion

                webHost = new WebHostBuilder()
                    .UseKestrel()
                    .UseUrls(webapiUrl)
                    //.UseWebRoot($"{AppContext.BaseDirectory}/wwwroot")
                    .UseContentRoot(AppContext.BaseDirectory)
                    .UseIISIntegration()
                    .UseStartup<Startup>()
                    .Build();
                webHost.Run();
            }
            catch (Exception ex)
            {
                NLogger.Error($"启动WebServer异常：{ex.Message}");
            }
        }

        class Startup
        {
            /// <summary>
            /// 此方法由运行时调用。使用此方法将服务添加到容器中。
            /// </summary>
            /// <param name="services"></param>
            public void ConfigureServices(IServiceCollection services)
            {
                services.AddMvc();

                //添加cors 服务
                //services.AddCors(options =>options.AddPolicy("CorsSample", p => p.WithOrigins("http://192.168.110.56:5539").AllowAnyMethod().AllowAnyHeader()));

                //services.AddSingleton(HtmlEncoder.Create(UnicodeRanges.All));
            }

            /// <summary>
            /// 此方法由运行时调用。使用此方法配置HTTP请求管道
            /// </summary>
            /// <param name="app"></param>
            /// <param name="env"></param>
            public void Configure(IApplicationBuilder app, IHostingEnvironment env)
            {
                #region 解决Ubuntu Nginx 代理不能获取IP问题
                app.UseForwardedHeaders(new ForwardedHeadersOptions
                {
                    ForwardedHeaders = ForwardedHeaders.XForwardedFor | ForwardedHeaders.XForwardedProto
                });
                #endregion

                #region 调用文件服务器，使用静态html文件
                app.UseStaticFiles();//缺少会导致wwwroot下的资源无法访问
                app.UseStaticFiles(new StaticFileOptions()
                {
                    FileProvider = new PhysicalFileProvider($@"{AppContext.BaseDirectory}wwwroot"),
                    RequestPath = "/wwwroot"
                });
                #endregion
                app.UseMiddleware<MvcHandlerMiddleware>();  //注册路由拦截中间件
                app.UseMvc(routes =>
                {
                    routes.MapRoute(
                        name: "default",
                        template: "{controller=Home}/{action=Index}/{id?}");
                });//使用Mvc，设置默认路由为系统登录
                //app.UseCors("all");//允许跨域
            }
        }

        /// <summary>
        /// MVC路由拦截中间件
        /// </summary>
        class MvcHandlerMiddleware
        {
            private readonly RequestDelegate _next;
            public MvcHandlerMiddleware(RequestDelegate next)
            {
                _next = next;
            }

            public Task Invoke(HttpContext httpContext, IServiceProvider serviceProvider)
            {
                if (httpContext.Request.Path.Equals("/"))//默认路由
                {
                    var app = new ApplicationBuilder(serviceProvider);
                    httpContext.Request.Method = "GET";
                    httpContext.Request.Path = "/app/home/toindex";
                }

                string url = httpContext.Request.Path;
                if (!url.Equals("/app/user/login"))//拦截非登录请求
                {
                    string token = httpContext.Request.Headers["Authorization"];//获取授权Token
                    if (string.IsNullOrEmpty(UserCacher.GetCache(token)))//缓存中没有用户
                    {
                        var app = new ApplicationBuilder(serviceProvider);
                        httpContext.Request.Method = "GET";
                        httpContext.Request.Path = "/app/user/tologin";
                    }
                    else
                    {
                        UserCacher.DelayCache(token);
                    }
                }
                return _next(httpContext);
            }
        } 
        #endregion

        /// <summary>
        /// 检测端口是否被占用
        /// </summary>
        /// <param name="port"></param>
        /// <returns></returns>
        private bool PortInUse(int port)
        {
            IPGlobalProperties ipProperties = IPGlobalProperties.GetIPGlobalProperties();
            IPEndPoint[] ipEndPoints = ipProperties.GetActiveTcpListeners();
            return ipEndPoints.Any(c => c.Port == port);
        }

        /// <summary>
        /// 销毁
        /// </summary>
        public void Dispose()
        {
            NLogger.Info("关闭WebServer...");
            webHost?.StopAsync();
            webHost?.Dispose();
        }
    }
}
