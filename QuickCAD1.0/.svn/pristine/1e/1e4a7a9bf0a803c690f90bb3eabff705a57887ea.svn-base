using Max.BaseKit;
using Max.BaseKit.Utils;
using Max.TcpKit.Core;
using Newtonsoft.Json;
using System;
using System.Text;

namespace Max.ISolator.Core.Handlers
{
    /// <summary>
    /// 串口服务器数据监听助手
    /// </summary>
    public class SerialServerHandler : CommHandler
    {
        #region 单例
        private static SerialServerHandler instance;
        private readonly static object objLock = new object();
        public static SerialServerHandler Instance
        {
            get
            {
                if (instance == null)
                {
                    lock (objLock)
                    {
                        if (instance == null)
                        {
                            instance = new SerialServerHandler();
                        }
                    }
                }
                return instance;
            }
        }
        #endregion

        /// <summary>
        /// 注册串口服务器接收事件
        /// </summary>
        public void SubscribeComServer(MaxTcpClient tcpClient)
        {
            tcpClient.OnReceived += TcpClient_OnReceived;
        }

        private void TcpClient_OnReceived(byte[] obj)
        {
            try
            {
                if (obj == null || obj.Length <= 0) return;
                byte[] jy_bytes = ZipUtil.Decompress(obj);//解压
                string msg = Encoding.UTF8.GetString(jy_bytes);
                IsolatorData idata = JsonConvert.DeserializeObject<IsolatorData>(msg);
                NLogger.Debug($"串口服务器接收到{idata.Cmd}数据...");
                if (idata == null) return;
                ConsumeData(idata);//消费数据
            }
            catch (Exception ex)
            {
                NLogger.Error($"串口服务器接收数据异常：{ex.Message}");
            }
        }
    }
}