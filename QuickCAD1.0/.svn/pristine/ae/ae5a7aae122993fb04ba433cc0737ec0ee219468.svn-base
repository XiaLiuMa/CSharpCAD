using IsolatorTarget.Models;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Authorization;
using Max.BaseKit.Utils;
using System.Net.Mime;
using Max.BaseKit.Exts;

namespace IsolatorTarget.Controllers
{
    /// <summary>
    /// 日志管理控制器
    /// </summary>
    [Authorize]
    public class LogMgtController : Controller
    {
        public IActionResult Index()
        {
            return View();
        }

        public IActionResult Detail()
        {
            return View();
        }

        /// <summary>
        /// 分页搜索
        /// </summary>
        /// <param name="page"></param>
        /// <param name="limit"></param>
        /// <param name="logType"></param>
        /// <param name="stime"></param>
        /// <param name="etime"></param>
        /// <returns></returns>
        [HttpGet]
        public ResultPaging<LogVMod> PagingSearch(int page = 1, int limit = 10, string logType = "", string stime = "", string etime = "")
        {
            var rd = new ResultPaging<LogVMod>();
            var tlst = new List<LogVMod>();
            #region 搜索
            switch (logType)
            {
                case "zyd": tlst.AddRange(SearchOriginLogs()); break;
                case "zyd_info": tlst.AddRange(SearchOriginLogs("info")); break;
                case "zyd_waring": tlst.AddRange(SearchOriginLogs("waring")); break;
                case "zyd_error": tlst.AddRange(SearchOriginLogs("error")); break;
                case "mbd": tlst.AddRange(SearchTargetLogs()); break;
                case "mbd_info": tlst.AddRange(SearchTargetLogs("info")); break;
                case "mbd_waring": tlst.AddRange(SearchTargetLogs("waring")); break;
                case "mbd_error": tlst.AddRange(SearchTargetLogs("error")); break;
                default: tlst.AddRange(SearchOriginLogs()); tlst.AddRange(SearchTargetLogs()); break;
            }
            if (!string.IsNullOrEmpty(stime))
            {
                tlst = tlst.FindAll(p => Convert.ToDateTime(p.UpdateTime) >= Convert.ToDateTime(stime)).ToList();
            }
            if (!string.IsNullOrEmpty(etime))
            {
                tlst = tlst.FindAll(p => Convert.ToDateTime(p.UpdateTime) <= Convert.ToDateTime(etime)).ToList();
            }
            #endregion

            tlst = tlst.OrderByDescending(p => p.UpdateTime).ToList();
            var lst = tlst.Skip((page - 1) * limit).Take(limit).ToList();
            rd.Count = tlst.Count;
            rd.Data = lst;
            return rd;
        }

        /// <summary>
        /// 搜索源头端日志
        /// </summary>
        /// <param name="logType"></param>
        /// <returns></returns>
        private List<LogVMod> SearchOriginLogs(string logType = "")
        {
            var rlst = new List<LogVMod>();
            var originPath = $"{AppContext.BaseDirectory}orgin_logs/";//源头端日志
            if (Directory.Exists(originPath)) Directory.CreateDirectory(originPath);
            var originFiles = FileUtil.FindFiles(new DirectoryInfo(originPath), logType, "*.log");
            originFiles?.ForEach(f =>
            {
                rlst.Add(new LogVMod()
                {
                    LogFullFileName = f.FullName,
                    BelongSystem = "IsolatorOrgin",
                    LogType = f.Name.Replace(".log", "").Split('_')[1],
                    UpdateTime = f.LastWriteTime.ToString("yyyy-MM-dd HH:mm:ss"),
                    LogFileName = f.Name
                });
            });
            return rlst;
        }

        /// <summary>
        /// 搜索目标端日志
        /// </summary>
        /// <param name="logType"></param>
        /// <returns></returns>
        private List<LogVMod> SearchTargetLogs(string logType = "")
        {
            var rlst = new List<LogVMod>();
            var targetPath = $"{AppContext.BaseDirectory}logs/";//目标端日志
            if (Directory.Exists(targetPath)) Directory.CreateDirectory(targetPath);
            var targetFiles = FileUtil.FindFiles(new DirectoryInfo(targetPath), logType, "*.log");
            targetFiles?.ForEach(f =>
            {
                rlst.Add(new LogVMod()
                {
                    LogFullFileName = f.FullName,
                    BelongSystem = "IsolatorTarget",
                    LogType = f.Name.Replace(".log", "").Split('_')[1],
                    UpdateTime = f.LastWriteTime.ToString("yyyy-MM-dd HH:mm:ss"),
                    LogFileName = f.Name
                });
            });
            return rlst;
        }


        /// <summary>
        /// 查看日志
        /// </summary>
        /// <param name="fileName"></param>
        /// <returns></returns>
        [HttpPost]
        public ActionResult<ResultMsg<string>> ViewLog(string fileName = "")
        {
            if (string.IsNullOrEmpty(fileName)) return Ok(new ResultMsg<string>() { Code = StatusType.ParameterNull, Msg = "查看失败，参数为空" });
            if (!System.IO.File.Exists(fileName)) return Ok(new ResultMsg<string>() { Code = StatusType.Failed, Msg = "查看失败，文件不存在" });
            string str = "";
            using (FileStream fs = new FileStream(fileName, FileMode.Open, FileAccess.Read, FileShare.ReadWrite))
            {
                using (StreamReader sr = new StreamReader(fs))
                {
                    string line;
                    while ((line = sr.ReadLine()) != null)
                    {
                        str += $"{line}\n\n";
                    }
                }
            }
            return Ok(new ResultMsg<string>() { Code = StatusType.Success, Msg = "查看日志成功", Data = str });
        }

        /// <summary>
        /// 删除
        /// </summary>
        /// <param name="ids"></param>
        /// <returns></returns>
        [HttpPost]
        public ActionResult<ResultMsg<string>> Delete(string ids = "")
        {
            if (string.IsNullOrEmpty(ids)) return Ok(new ResultMsg<string>() { Code = StatusType.Success, Msg = "删除失败，参数为空" });
            var idArr = ids.TrimEnd(",").Split(',').ToList();
            int count = 0;
            idArr?.ForEach(i =>
            {
                try
                {
                    System.IO.File.Delete(i);
                    count++;
                }
                catch (Exception ex)
                {

                }
            });
            return Ok(new ResultMsg<string>() { Code = count > 0 ? StatusType.Success : StatusType.Failed, Msg = count > 0 ? "删除成功" : "删除失败" });
        }

        /// <summary>
        /// 日志下载
        /// </summary>
        /// <param name="filePath"></param>
        /// <returns></returns>
        [HttpGet]
        public async Task<IActionResult> Download(string filePath = "")
        {
            if (!System.IO.File.Exists(filePath))
            {
                return BadRequest("文件不存在");
            }

            var memoryStream = new MemoryStream();
            using (var stream = new FileStream(filePath, FileMode.Open, FileAccess.Read, FileShare.ReadWrite))
            {
                await stream.CopyToAsync(memoryStream);
            }
            memoryStream.Seek(0, SeekOrigin.Begin);
            var contentType = "application/octet-stream";
            var contentDisposition = new ContentDisposition
            {
                FileName = Path.GetFileName(filePath),
                Inline = false //强制浏览器下载而不是在浏览器中打开
            };

            Response.Headers.Add("Content-Disposition", contentDisposition.ToString());
            return File(memoryStream, contentType, Path.GetFileName(filePath));
        }
    }
}