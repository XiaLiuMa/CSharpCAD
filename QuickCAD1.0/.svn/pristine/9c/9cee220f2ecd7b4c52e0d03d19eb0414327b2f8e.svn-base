using Max.BaseKit;
using Max.BaseKit.Utils;
using System;
using System.IO;
using Max.ISolator.Core.Handlers;
using Max.ISolator.NetBrakePkg;

namespace Max.ISolator.Core.Syncers
{
    /// <summary>
    /// 网闸同步助手
    /// </summary>
    public class GatekeeperSyncer : AbsSyncer
    {
        /// <summary>
        /// 网闸配置
        /// </summary>
        public NetBrakeCfg Config { get; private set; }

        public GatekeeperSyncer(string iparam)
        {
            try
            {
                NLogger.Info($"初始化网闸助手。。。");
                var mParam = JsonUtil.StrToObject<NetBrakeCfg>(iparam);
                if (mParam != null)
                {
                    Config = mParam;
                    Config.SyncPath = string.IsNullOrEmpty(Config.SyncPath) ? $"{AppContext.BaseDirectory}/Temp/BackupPath" : Config.SyncPath;
                    if (!Directory.Exists(Config.SyncPath)) Directory.CreateDirectory(Config.SyncPath);
                    Config.ScanPath = string.IsNullOrEmpty(Config.ScanPath) ? $"{AppContext.BaseDirectory}/Temp/ScanPath" : Config.ScanPath;
                    if (!Directory.Exists(Config.ScanPath)) Directory.CreateDirectory(Config.ScanPath);
                    Config.BackupPath = string.IsNullOrEmpty(Config.BackupPath) ? $"{AppContext.BaseDirectory}/Temp/BackupPath" : Config.BackupPath;
                    if (!Directory.Exists(Config.BackupPath)) Directory.CreateDirectory(Config.BackupPath);
                    Config.LocalImgPath = string.IsNullOrEmpty(Config.LocalImgPath) ? $"{AppContext.BaseDirectory}/Temp/LocalImgPath" : Config.LocalImgPath;
                    if (!Directory.Exists(Config.LocalImgPath)) Directory.CreateDirectory(Config.LocalImgPath);
                }
                else
                {
                    NLogger.Warn($"网闸助手参数不合理，将使用默认路径。");
                }
                GatekeeperHandler.Instance.SubscribeNetBrake(Config);
            }
            catch (Exception ex)
            {
                NLogger.Error($"初始化网闸助手异常：{ex.Message}");
            }
        }

        public override void SyncData(IsolatorData idata)
        {
            if (idata == null || idata.Lst.Count <= 0) return;
            var tlst = LimitIsolatorData(idata);//分页

            for (int i = 0; i < tlst.Count; i++)
            {
                try
                {
                    var fName = CacheData(tlst[i], i + 1);//缓存文件

                    //将文件转存到同步路径中
                    //TODO...
                }
                catch (Exception ex)
                {
                    NLogger.Error($"网闸同步数据异常：{ex.Message}");
                }
            }
        }
    }
}
