using System;
using System.Linq;
using Max.BaseKit;
using DataSyncTarget.Config;
using DataSyncTarget.Services;
using DataSyncTarget.Config.Entities;
using DataSyncTarget.UseData.Services;
using System.Collections.Generic;
using System.IO;
using Max.BaseKit.Exts;
using Max.ISolator.Core.Handlers;
using Max.ISolator.Core;
using Max.ISolator.MinioPkg;

namespace DataSyncTarget.UseData
{
    /// <summary>
    /// 核心(分发)服务
    /// </summary>
    public class KernelService : MaxIService
    {
        /// <summary>
        /// 消费数据
        /// </summary>
        /// <param name="idata"></param>
        public void ConsumeData(IsolatorData idata)
        {
            #region 图片处理
            var t_DataLst = new List<Dictionary<string, object>>();//临时数据集(克隆用)
            t_DataLst.AddRange(idata.Lst);
            idata.Lst.Clear();
            foreach (var item_data in t_DataLst)
            {
                var t_Dic = new Dictionary<string, object>();
                foreach (var item_dic in item_data)
                {
                    string guid = Guid.NewGuid().ToString("N");
                    if (item_dic.Key.StartsWith("TP_")) //TP_开头的表示要入到Minio
                    {
                        try
                        {
                            string tp_key = item_dic.Key;//图片字段名
                            object tp_value = default;//图片字段数据
                            item_data.TryGetValue(tp_key, out tp_value);
                            string tpm_key = tp_key.Replace("TP_", "TPM_");//图片名字段名
                            object tpm_value = default;//图片名字段数据
                            item_data.TryGetValue(tpm_key, out tpm_value);
                            string fName = SaveFile((string)tp_value, (string)tpm_value, "2");//保存图片
                            t_Dic.Add(tp_key.Replace("TP_", ""), fName);//字段中增加正式字段
                        }
                        catch (Exception ex)
                        {
                            NLogger.Warn($"上传文件到文件服务器异常：{ex.Message}");
                        }
                    }
                    else if (item_dic.Key.StartsWith("IMG_")) //IMG_开头的表示直接入到数据库
                    {
                        string clomename = item_dic.Key.Replace("IMG_", "");
                        if (string.IsNullOrEmpty((string)item_dic.Value)) continue;
                        byte[] tbtyes = Convert.FromBase64String((string)item_dic.Value);
                        t_Dic.Add(clomename, tbtyes);//字段中增加正式字段
                    }
                    else
                    {
                        t_Dic.Add(item_dic.Key, item_dic.Value);
                    }
                }
                foreach (var item_dic in t_Dic)
                {
                    if (item_dic.Key.StartsWith("TP_") || item_dic.Key.StartsWith("TPM_"))
                    {
                        t_Dic.Remove(item_dic.Key);
                    }
                }
                idata.Lst.Add(t_Dic);
            }
            #endregion



            var tTask = AppDbConfiger.QueryFirst<TargetTask>(idata.Cmd);
            var sids = tTask?.ServiceIds?.Split(',').ToList();//服务标识="D01,K01,R01"=>["D01","K01","R01"]
            sids?.ForEach(sid =>
            {
                try
                {
                    if (sid.StartsWith("D")) //数据库消费
                    {
                        //var tDb = AppDbConfiger.QueryFirst<TargetDb>(sid);
                        new DatabaseService().ConsumeData(idata, tTask, sid);
                    }
                    else if (sid.StartsWith("K")) //Kafka消费
                    {
                        var tKafka = AppDbConfiger.QueryFirst<KafkaPdr>(sid);
                        new KafkaService().ConsumeData(idata, tTask, tKafka);
                    }
                    else if (sid.StartsWith("R")) //RabbitMQ消费
                    {
                        var tRmq = AppDbConfiger.QueryFirst<TargetRmqPdr>(sid);
                        new RabbitService().ConsumeData(idata, tRmq);
                    }
                }
                catch (Exception ex)
                {
                    NLogger.Error($"DatabaseService处理隔离器数据异常：{ex.Message}");
                }
            });
        }

        /// <summary>
        /// 保存文件(保存到本地或上传到文件服务器)
        /// </summary>
        /// <param name="fData">文件数据base64</param>
        /// <param name="fName">文件名称</param>
        /// <param name="sMode">保存模式(1:本地保存，2:上传服务器)</param>
        /// <returns>返回文件保存地址</returns>
        private string SaveFile(string fData, string fName, string sMode)
        {
            if (string.IsNullOrEmpty(fData) || string.IsNullOrEmpty(fName)) return string.Empty;
            byte[] tp_bytes = Convert.FromBase64String(fData);
            if ("1".Equals(sMode))//保存文件到本地
            {
                string t_fname = $@"D:\xx项目\{fName}.jpg";//文件名称
                string t_dir = Path.GetDirectoryName(t_fname);
                if (!Directory.Exists(t_dir)) Directory.CreateDirectory(t_dir);//允许创建多级目录
                using (var fsread = new FileStream(t_fname, FileMode.Create, FileAccess.Write, FileShare.None))
                {
                    fsread.Write(tp_bytes, 0, tp_bytes.Length);
                    fsread.Close();
                    fsread.Dispose();
                }
                return t_fname;
            }
            else if ("2".Equals(sMode))//上传文件到文件服务器
            {
                string t_fname = $@"{fName}.jpg";//文件名称
                using (MemoryStream filestream = new MemoryStream(tp_bytes))
                {
                    #region 同步上传图片(使用异步上传后面会崩掉)
                    SimpleMinioClient simple = MinioClientManger.Instance.Borrow();
                    simple?.PutObjectAsync(MinioClientManger.Instance.BucketName, t_fname, filestream).Wait();
                    MinioClientManger.Instance.Still(simple);
                    #endregion
                    filestream.Close();
                    filestream.Dispose();
                }

                if (NetBrakeHandler.Instance.Config.LocalImgEnable)//图片本地保存
                {
                    try
                    {
                        string imgfname = $@"{NetBrakeHandler.Instance.Config.LocalImgPath}/{fName}.jpg";//图片文件名称
                        if (!Directory.Exists(Path.GetDirectoryName(imgfname))) Directory.CreateDirectory(Path.GetDirectoryName(imgfname));//允许创建多级目录
                        if (!imgfname.IsFileInUsing(600))//避免已存在的文件的占用问题
                        {
                            using (var fsread = new FileStream(imgfname, FileMode.OpenOrCreate, FileAccess.Write, FileShare.None))
                            {
                                fsread.Write(tp_bytes, 0, tp_bytes.Length);
                                fsread.Close();
                                fsread.Dispose();
                            }
                        }
                    }
                    catch (Exception ex)
                    {
                        NLogger.Warn($"图片缓存到本地异常：{ex.Message}");
                    }
                }

                return t_fname;
            }
            else
            {
                return default;
            }
        }
    }
}
