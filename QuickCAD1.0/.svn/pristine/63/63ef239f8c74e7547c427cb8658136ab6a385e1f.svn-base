using Max.BaseKit.Utils;
using Max.ISolator.Core;
using IsolatorOrigin.Business.MaxQuartz;
using System.Diagnostics;
using Max.BaseKit.Exts;
using Max.BaseKit;
using Max.ISolator.Core.Isolators;
using Max.ISolator.Core.Mods;
using IsolatorOrigin.Models;

namespace IsolatorOrigin.Business
{
    /// <summary>
    /// 业务主导入口
    /// </summary>
    public class BusinessLeader
    {
        #region 单例
        private static BusinessLeader i;
        private readonly static object objLock = new object();
        public static BusinessLeader I
        {
            get
            {
                if (i == null)
                {
                    lock (objLock)
                    {
                        if (i == null)
                        {
                            i = new BusinessLeader();
                        }
                    }
                }
                return i;
            }
        }
        #endregion

        /// <summary>
        /// 启动
        /// </summary>
        public void BootUp()
        {
            InitISolator();
            StartBootUpTask();
            StartTimeTask();
        }

        /// <summary>
        /// 初始化隔离器
        /// </summary>
        public void InitISolator()
        {
            string programName = $"{AppContext.BaseDirectory}{Path.GetFileNameWithoutExtension(Process.GetCurrentProcess().MainModule.FileName)}";
            MaxIsolator.I.Init(programName, (p) => { });//初始化隔离器工具

            ConfigCacher.I.GatekeeperCacher.EntityList?.ForEach(p => //加入网闸隔离器
            {
                if (!p.IsUsable) return;
                var commConfig = p.Convert<IsolatorConfig>();
                if (commConfig != null)
                {
                    MaxIsolator.I.IIsolator_Dic.TryAdd(p.Id, new GatekeeperIsolator(p.Id, p.SyncPath, p.ScanPath, commConfig));
                }
                else
                {
                    NLogger.Warn("加入网闸隔离器失败，请检查配置信息。");
                }
            });
            ConfigCacher.I.SerialPortCacher.EntityList?.ForEach(p => //加入串口隔离器
            {
                if (!p.IsUsable) return;
                var commConfig = p.Convert<IsolatorConfig>();
                if (commConfig != null)
                {
                    MaxIsolator.I.IIsolator_Dic.TryAdd(p.Id, new SerialPortIsolator(p.Id, p.PortName, p.BaudRate, p.DataBit, p.StopBit, p.Parity, commConfig));
                }
                else
                {
                    NLogger.Warn("加入串口隔离器失败，请检查配置信息。");
                }
            });
            ConfigCacher.I.SerialServerCacher.EntityList?.ForEach(p => //加入串口服务器隔离器
            {
                if (!p.IsUsable) return;
                var commConfig = p.Convert<IsolatorConfig>();
                if (commConfig != null)
                {
                    MaxIsolator.I.IIsolator_Dic.TryAdd(p.Id, new SerialServerIsolator(p.Id, p.ServerIP, p.ServerPort, commConfig));
                }
                else
                {
                    NLogger.Warn("加入串口服务器隔离器失败，请检查配置信息。");
                }
            });

            MaxIsolator.I.BootUp();//启动隔离器
        }

        /// <summary>
        /// 启动开机任务
        /// </summary>
        private void StartBootUpTask()
        {
            var now = DateTime.Now;//当前时间
            var tempLst = new List<RuningManualTaskExt>();//临时列表
            ConfigCacher.I.ProduceTaskCacher.EntityList?.ForEach(task =>
            {
                if (!task.TaskState) return;
                var dbids = task.Dbs.Split(',').ToList();
                dbids?.ForEach(dbid =>
                {
                    var tid = $"{task.Cmd}_{dbid}";//组合id("命令码_数据库标识")
                    var trt = ConfigCacher.I.TaskRunTimeCacher.Find(t => tid.Equals(t.Id));
                    ConfigCacher.I.SetTaskRunTime(tid, now.ToString("yyyy-MM-dd HH:mm:ss"));
                    string stime = trt == null ? now.AddMinutes(-10).ToString("yyyyMMddHHmmss") : trt.RunTime.TimeStrConvert("yyyy-MM-dd HH:mm:ss", "yyyyMMddHHmmss");
                    string etime = now.ToString("yyyyMMddHHmmss");
                    var db = ConfigCacher.I.UseDbCacher.Find(t => dbid.Equals(t.Id));
                    if (db == null) return;
                    var tobj = new RuningManualTaskExt()
                    {
                        Id = Guid.NewGuid().ToString("N"),
                        Cmd = task.Cmd,
                        TaskName = task.TaskName,
                        Task = task,
                        DbDesc = db.DbDescribe,
                        Db = db,
                        STime = stime,
                        ETime = etime,
                        RTime = now.ToString("yyyy-MM-dd HH:mm:ss")
                    };
                    tempLst.Add(tobj);
                    var bobj = tobj.Convert<RuningManualTask>();
                    ConfigCacher.I.RuningManualTasks.Add(bobj);
                });
            });

            Task.Factory.StartNew(() =>
            {
                tempLst?.ForEach(temp =>
                {
                    var bobj = ConfigCacher.I.RuningManualTasks.Find(p => temp.Id.Equals(p.Id));
                    ConfigCacher.I.RuningManualTasks.Remove(bobj);
                    var bobj1 = temp.Convert<RuningManualTask>();
                    bobj1.RState = 1;//正在运行中
                    ConfigCacher.I.RuningManualTasks.Add(bobj1);

                    JobKernel.RunJob(temp.Task, temp.Db, temp.STime, temp.ETime, false);

                    var bobj2 = ConfigCacher.I.RuningManualTasks.Find(p => temp.Id.Equals(p.Id));
                    ConfigCacher.I.RuningManualTasks.Remove(bobj2);//运行完成，删除掉
                });
            });
        }

        /// <summary>
        /// 启动定时任务
        /// </summary>
        private void StartTimeTask()
        {
            ConfigCacher.I.CronJobCacher.EntityList?.ForEach(job =>
            {
                DateTime nowTime = DateTime.Now;  //当前时间
                QuartzManager.StartJobWithCron<QuartzJob>(job.Id, job.CronExpr);//启动定时任务
            });
        }

        /// <summary>
        /// 停止
        /// </summary>
        public void ShutDown()
        {

        }
    }
}
