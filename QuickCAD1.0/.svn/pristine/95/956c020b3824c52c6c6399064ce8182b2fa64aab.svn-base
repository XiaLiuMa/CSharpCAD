using System;
using System.IO;
using Max.BaseKit;
using Max.DbTool;
using Max.BaseKit.Exts;
using Max.BaseKit.Utils;
using System.Diagnostics;
using DataSyncSource.Config.Entities;
using System.Collections.Generic;
using Max.DbTool.Core.Mod;

namespace DataSyncSource.Config
{
    public class AppDbConfiger
    {
        private static DbConfig _config;

        /// <summary>
        /// 获取APP的db操作对象
        /// </summary>
        /// <returns></returns>
        private static IDbOperate GetAppDbOperate()
        {
            if (_config == null)
            {
                _config = new DbConfig()
                {
                    Id = Guid.NewGuid().ToString("N"),
                    DbType = "SQLITE",
                    ConnStr = $"Data Source={AppContext.BaseDirectory}{Path.GetFileNameWithoutExtension(Process.GetCurrentProcess().MainModule.FileName)}.db"
                };
            }
            return DbOperateManger.Instance.Borrow(_config);
        }

        /// <summary>
        /// 根据主键Id获取对象
        /// </summary>
        /// <param name="id"></param>
        /// <returns></returns>
        public static T QueryFirst<T>(object id)
        {
            T t = default;
            using (var appDbOperate = GetAppDbOperate())
            {
                t = appDbOperate.QueryFirst<T>(id);
                if (t == null) NLogger.Warn($"通过{id.ToJson()}主键未找到{typeof(T)}");
                return t;
            }
        }

        /// <summary>
        /// 根据条件获取对象集
        /// </summary>
        /// <returns></returns>
        public static List<T> QueryByCondition<T>(params ConditionModel[] conditions)
        {
            using (var appDbOperate = GetAppDbOperate())
            {
                var ts = appDbOperate.QueryByCondition<T>(conditions);
                if (!(ts?.Count > 0)) NLogger.Warn($"通过{conditions?.ToJson()}条件未找到{typeof(T)}数据集");
                return ts;
            }
        }

        /// <summary>
        /// 设置定时任务运行时间
        /// </summary>
        /// <typeparam name="CronJob"></typeparam>
        /// <param name="id"></param>
        /// <param name="rumTime"></param>
        public static void SetRunTime(string id, string rumTime)
        {
            using (var appDbOperate = GetAppDbOperate())
            {
                //TODO:定时任务设置
                //var sourceDb = GetById<SourceDb>(id);
                //t = appDbOperate.Update<CronJob>(id);
                //if (t == null) NLogger.Warn($"通过{id.ToJson()}未找到{typeof(T)}");
                //return t;
            }
        }

        /// <summary>
        /// 根据Id获取数据库操作对象
        /// </summary>
        /// <param name="id"></param>
        /// <returns></returns>
        public static IDbOperate GetDbOperaterById(string id)
        {
            var sourceDb = QueryFirst<SourceDb>(id);
            return sourceDb == null ? null : DbOperateManger.Instance.Borrow(JsonUtil.StrToObject<DbConfig>(sourceDb.ToJson()));
        }

        ///// <summary>
        ///// 设置运行时间
        ///// </summary>
        ///// <param name="id"></param>
        ///// <param name="time"></param>
        //public static void SetRunTime(string id, string time)
        //{
        //    var job = AppDbConfiger.Operate.QueryFirst<CronJob>(id);
        //    if (job != null)
        //    {
        //        job.RunTime = time;
        //        AppDbConfiger.Operate.Update<CronJob>(job);
        //    }
        //}

        ///// <summary>
        ///// 根据JobId查询可用的子任务列表
        ///// </summary>
        ///// <param name="id"></param>
        ///// <returns></returns>
        //public List<MsTask> SelectForJobId(string id)
        //{
        //    if (string.IsNullOrEmpty(id)) return null;
        //    var rlst = Lst.Where(p => id.Equals(p.Cmd) && Convert.ToBoolean(p.State)).ToList();
        //    return rlst;
        //}
    }
}
