using GaCharSet.Config.Mods;
using GaCharSet.UseData.SetChar;
using Max.BaseKit;
using Max.BaseKit.Utils;
using Max.ISolator;
using System;

namespace GaCharSet.Comm
{
    public class AsGlobal
    {
        private static AppConfig _Config;
        /// <summary>
        /// App系统配置
        /// </summary>
        public static AppConfig Config
        {
            get
            {
                if (_Config == null)
                {
                    string filepath = $@"{AppContext.BaseDirectory}/GaCharSet.xml";
                    _Config = XmlUtils.Load<AppConfig>(filepath);
                }
                return _Config;
            }
            set
            {
                _Config = value;
            }
        }

        /// <summary>
        /// 初始化系统
        /// </summary>
        public static void Init()
        {
            try
            {
                NLogger.Info($"启动{Config.AppName}...");
                LogManager.Instance.StartLogCleaning();
                SetCharacter.Instance.Init();//初始化字符叠加器

                #region 启动隔离器
                string iparam = (Config.SyncType == 1) ? JsonUtil.ObjectToStr(Config.NetBrake) : (Config.SyncType == 2) ? JsonUtil.ObjectToStr(Config.SerialPorts) : (Config.SyncType == 3) ? JsonUtil.ObjectToStr(Config.SerialServers) : "";
                MaxISolator.Instance.InitISolator(Config.SyncType, Config.BlockSize, iparam, (p) => {  });
                #endregion
            }
            catch (Exception ex)
            {
                NLogger.Error($"系统初始化失败：{ex.Message}");
            }
        }

        /// <summary>
        /// 释放系统
        /// </summary>
        public static void DisInit()
        {
            NLogger.Info($"停止{Config.AppName}...");
            try
            {
                SaveAppConfig();
                LogManager.Instance.StopLogCleaning();
                SetCharacter.Instance.DisInit();
            }
            catch (Exception ex)
            {
                NLogger.Error($"停止{Config.AppName}异常：{ex.Message}");
            }
        }

        /// <summary>
        /// 保存系统配置文件
        /// </summary>
        public static void SaveAppConfig()
        {
            string filepath = $@"{AppContext.BaseDirectory}/GaCharSet.xml";
            XmlUtils.Save(Config, filepath);
        }
    }
}
