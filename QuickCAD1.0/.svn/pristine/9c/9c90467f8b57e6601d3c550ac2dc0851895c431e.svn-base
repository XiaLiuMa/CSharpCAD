using Max.ISolator.Core;
using Max.ISolator.Core.Syncers;
using IsolatorOrigin.Business.MaxQuartz;

namespace IsolatorOrigin.Business
{
    /// <summary>
    /// 业务主导入口
    /// </summary>
    public class BusinessLeader
    {
        #region 单例
        private static BusinessLeader i;
        private readonly static object objLock = new object();
        public static BusinessLeader I
        {
            get
            {
                if (i == null)
                {
                    lock (objLock)
                    {
                        if (i == null)
                        {
                            i = new BusinessLeader();
                        }
                    }
                }
                return i;
            }
        }
        #endregion

        /// <summary>
        /// 启动
        /// </summary>
        public void BootUp()
        {
            InitISolator();
            StartBootUpTask();
            StartTimeTask();
        }

        /// <summary>
        /// 初始化隔离器
        /// </summary>
        public void InitISolator()
        {
            ConfigCacher.I.Gatekeeper_Lst?.ForEach(p =>
            {
                MaxISolator.I.ISyncer_Lst.TryAdd(p.Id, new GatekeeperIsolator(""));
            });

            ConfigCacher.I.SerialPort_Lst?.ForEach(p =>
            {
                MaxISolator.I.ISyncer_Lst.TryAdd(p.Id, new SerialPortIsolator(""));
            });

            ConfigCacher.I.SerialServer_Lst?.ForEach(p =>
            {
                MaxISolator.I.ISyncer_Lst.TryAdd(p.Id, new SerialServerIsolator(""));
            });
        }

        /// <summary>
        /// 启动开机任务
        /// </summary>
        private void StartBootUpTask()
        {
            var now = DateTime.Now;//当前时间
            ConfigCacher.I.SubTask_Lst?.ForEach(task =>
            {
                if (!task.TaskState) return;
                var dbids = task.Dbs.Split(',').ToList();
                dbids?.ForEach(dbid =>
                {
                    var tid = $"{task.Cmd}_{dbid}";//组合id("命令码_数据库标识")
                    var trt = ConfigCacher.I.TaskRunTime_Lst.Find(t => tid.Equals(t.Id));
                    ConfigCacher.I.SetTaskRunTime(tid, now.ToString("yyyy-MM-dd HH:mm:ss"));
                    string stime = trt == null ? now.AddMinutes(-10).ToString("yyyy-MM-dd HH:mm:ss") : trt.RunTime;
                    string etime = now.ToString("yyyy-MM-dd HH:mm:ss");
                    var db = ConfigCacher.I.SourceDb_Lst.Find(t => dbid.Equals(t.Id));
                    if (db == null) return;
                    JobKernel.RunJob(task, db, stime, etime, false);
                });
            });
        }

        /// <summary>
        /// 启动定时任务
        /// </summary>
        private void StartTimeTask()
        {
            ConfigCacher.I.CronJob_Lst?.ForEach(job =>
            {
                DateTime nowTime = DateTime.Now;  //当前时间
                QuartzManager.StartJobWithCron<QuartzJob>(job.Id, job.CronExpr);//启动定时任务
            });
        }

        /// <summary>
        /// 停止
        /// </summary>
        public void ShutDown()
        {

        }
    }
}
