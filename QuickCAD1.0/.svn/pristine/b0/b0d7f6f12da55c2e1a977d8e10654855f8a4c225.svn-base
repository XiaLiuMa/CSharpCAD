using Max.BaseKit;
using Max.BaseKit.Customs;
using Max.ISolator.Core.Mods;
using SetCharLib;

namespace IsolatorTarget.Business.Services
{
    /// <summary>
    /// 字符叠加服务
    /// </summary>
    public class SetCharService
    {
        #region 单例
        private static SetCharService i;
        private readonly static object objLock = new object();
        public static SetCharService I
        {
            get
            {
                if (i == null)
                {
                    lock (objLock)
                    {
                        if (i == null)
                        {
                            i = new SetCharService();
                        }
                    }
                }
                return i;
            }
        }
        #endregion

        public SetCharService()
        {
            CacheHelper.OnChanged += CacheDataChanged;
            CacheHelper.OnRemoved += CacheDataRemoved;
        }

        /// <summary>
        /// 缓存数据发生变化
        /// </summary>
        /// <param name="key"></param>
        /// <param name="data"></param>
        private void CacheDataChanged(string key, object data)
        {
            var dic = data as Dictionary<string, object>;

            dic.TryGetValue("MSTDH", out var mstdh);//梅沙通道号("口岸代码|通道号")
            var cameras = ConfigCacher.I.TargetCameraCacher.Where(p => p.IsUsable && mstdh.Equals(p.MSTDH));
            if (cameras == null || cameras.Count <= 0)
            {
                NLogger.Warn($"SetCharService》未找到{mstdh}对应的可用的相机设备配置。");
                return;
            }
            dic.TryGetValue("GZZZT", out var gzzzt);//工作站状态("1":上台，"2":下台)

            //TODU...区分上台下台操作，增加上台下台缓存
            if ("1".Equals((string)gzzzt))
            {
                GlobalSetChar.I.SetCharacter();
            }
            else if ("2".Equals((string)gzzzt))
            {
                GlobalSetChar.I.ClearCharacter();
            }
        }

        private void CacheDataRemoved(string key, object data)
        {
            var dic = data as Dictionary<string, object>;

            dic.TryGetValue("MSTDH", out var mstdh);//梅沙通道号("口岸代码|通道号")
            var cameras = ConfigCacher.I.TargetCameraCacher.Where(p => p.IsUsable && mstdh.Equals(p.MSTDH));
            if (cameras == null || cameras.Count <= 0)
            {
                NLogger.Warn($"SetCharService》未找到{mstdh}对应的可用的相机设备配置。");
                return;
            }
            dic.TryGetValue("GZZZT", out var gzzzt);//工作站状态("1":上台，"2":下台)

            //TODU...区分上台下台操作，增加上台下台缓存
            if ("1".Equals((string)gzzzt)) //长时间未更新旅客信息便将旅客信息清除
            {
                GlobalSetChar.I.SetCharacter();
            }
        }

        /// <summary>
        /// 消费数据
        /// </summary>
        /// <param name="idata">数据</param>
        public void ConsumeData(IsolatorData idata)
        {
            if (idata == null || idata.Lst == null || idata.Lst.Count <= 0) return;
            try
            {
                idata.Lst.ForEach(dic =>
                {
                    dic.TryGetValue("ID", out var id);//主键ID
                    if (string.IsNullOrEmpty((string)id)) return;
                    CacheHelper.UpdateCacheData((string)id, dic);



                });
            }
            catch (Exception ex)
            {
                NLogger.Error($"SetCharService消费{idata.Cmd}异常{ex.Message}。");
            }
        }
    }
}
